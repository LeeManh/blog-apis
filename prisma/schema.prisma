// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String 
  email     String  @unique
  password  String
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    Int
  refreshToken RefreshToken[]
  emailVerificationToken EmailVerificationToken[]
  passwordResetToken PasswordResetToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  users          User[]
  rolePermissions RolePermission[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Permission {
  id             Int              @id @default(autoincrement())
  action         String
  resource       String
  rolePermissions RolePermission[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  role         Role        @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission  @relation(fields: [permissionId], references: [id])
  permissionId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  isRevoked Boolean  @default(false)
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiredAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiredAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}